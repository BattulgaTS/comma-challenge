{"version":3,"sources":["map.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","getPointColor","point","speedThreshold","speed","Leafmap","color","pointList","L","Polyline","weight","opacity","smoothFactor","addTo","this","map","_this","center","lat","lng","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","setTimeout","invalidateSize","_this2","redLines","orangeLines","yellowLines","greenLines","props","data","forEach","trip","currentLine","currentColor","coords","push","LatLng","drawLineOnMap","react_default","a","createElement","id","Component","App","state","commaData","axios","get","then","res","setState","catch","err","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mcAMA,IAAMA,QAAUC,EAAOC,IAAVC,KAKPC,EAAgB,SAAUC,GAC9B,IAAIC,EAAiB,CAAC,GAAI,GAAI,IAC9B,OAAID,EAAME,MAAQD,EAAe,GAAW,QACxCD,EAAME,MAAQD,EAAe,GAAW,SACxCD,EAAME,MAAQD,EAAe,GAAW,SACrC,OAwEME,wLApECC,EAAOC,GACC,IAAIC,IAAEC,SAASF,EAAW,CAC5CD,MAAOA,EACPI,OAAQ,EACRC,QAAS,GACTC,aAAc,IAEFC,MAAMC,KAAKC,iDAEP,IAAAC,EAAAF,KAClBA,KAAKC,IAAMP,IAAEO,IAAI,MAAO,CACtBE,OAAQ,CAACC,IAAK,MAAOC,KAAM,QAC3BC,KAAM,GACNC,aAAa,IAEfb,IAAEc,UAAU,mGAAoG,CAC9GC,cAAc,EACdC,QAAS,GACTC,cAAe,KACdZ,MAAMC,KAAKC,KAEdW,WAAY,kBAAMV,EAAKD,IAAIY,kBAAkB,iDAG1B,IAAAC,EAAAd,KACfe,EAAW,GACXC,EAAc,GACdC,EAAc,GACdC,EAAa,GAEjBlB,KAAKmB,MAAMC,KAAKC,QAAS,SAACC,GACxB,IAAIC,EAAc,GACdC,EAAe,KACnBF,EAAKG,OAAOJ,QAAS,SAAAjC,GACnBmC,EAAYG,KAAK,IAAIhC,IAAEiC,OAAOvC,EAAMgB,IAAKhB,EAAMiB,MAC3B,MAAhBmB,EACFA,EAAerC,EAAcC,GAEzBoC,IAAiBrC,EAAcC,KACJ,QAAzBD,EAAcC,IAAkB2B,EAASW,KAAKH,GACrB,WAAzBpC,EAAcC,IAAqB4B,EAAYU,KAAKH,GAC3B,WAAzBpC,EAAcC,IAAqB6B,EAAYS,KAAKH,GAC3B,UAAzBpC,EAAcC,IAAoB8B,EAAWQ,KAAKH,GACtDA,EAAc,GACdC,EAAe,UAKvBT,EAASM,QAAQ,SAAA5B,GACfqB,EAAKc,cAAc,MAAOnC,KAE5BuB,EAAYK,QAAQ,SAAA5B,GAClBqB,EAAKc,cAAc,OAAQnC,KAE7BwB,EAAYI,QAAQ,SAAA5B,GAClBqB,EAAKc,cAAc,SAAUnC,KAE/ByB,EAAWG,QAAQ,SAAA5B,GACjBqB,EAAKc,cAAc,QAASnC,sCAI9B,OAAOoC,EAAAC,EAAAC,cAAChD,EAAD,CAASiD,GAAG,eAhEDC,aCWPC,6MAvBdC,MAAQ,CACPC,UAAW,uFAEU,IAAAtB,EAAAd,KACpBqC,IAAMC,IAAI,wCACNC,KAAM,SAACC,GACP1B,EAAK2B,SAAU,CACdL,UAAWI,EAAIpB,SAGhBsB,MAAQ,SAACC,GACRC,QAAQC,IAAI,0CAIhB,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAC9B,EAAD,CAASmB,KAAMpB,KAAKmC,MAAMC,oBAlBhBH,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.ffc9c08d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\n\n\nconst Wrapper = styled.div`\n  width: $(props -> props.width);\n  height: $(props -> props.height);\n`;\n\nconst getPointColor = function (point){\n  let speedThreshold = [10, 20, 25];\n  if (point.speed < speedThreshold[0]) return 'green'\n  if (point.speed < speedThreshold[1]) return 'yellow'\n  if (point.speed < speedThreshold[2]) return 'orange'\n  return 'red'\n}\n\nclass Leafmap extends Component {\n  drawLineOnMap(color, pointList){\n    let firstpolyline = new L.Polyline(pointList, {\n      color: color,\n      weight: 3,\n      opacity: 0.5,\n      smoothFactor: 1\n    });\n    firstpolyline.addTo(this.map);\n  }\n  componentDidMount() {\n    this.map = L.map('map', {\n      center: {lat: 37.77, lng: -122.43},\n      zoom: 15,\n      zoomControl: false\n    })\n    L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n      detectRetina: true,\n      maxZoom: 20,\n      maxNativeZoom: 17,\n    }).addTo(this.map);\n\n    setTimeout( () => this.map.invalidateSize(), 10 )\n\n  }\n  componentDidUpdate() {\n    let redLines = [];\n    let orangeLines = [];\n    let yellowLines = [];\n    let greenLines = [];\n\n    this.props.data.forEach( (trip) => {\n      let currentLine = [];\n      let currentColor = null;\n      trip.coords.forEach( point => {\n        currentLine.push(new L.LatLng(point.lat, point.lng));\n        if (currentColor == null) {\n          currentColor = getPointColor(point);\n        } else {          \n          if (currentColor !== getPointColor(point)) {\n            if (getPointColor(point) === 'red') redLines.push(currentLine);\n            if (getPointColor(point) === 'orange') orangeLines.push(currentLine);\n            if (getPointColor(point) === 'yellow') yellowLines.push(currentLine);\n            if (getPointColor(point) === 'green') greenLines.push(currentLine);\n            currentLine = [];\n            currentColor = null;\n          }\n        }\n      })\n    })\n    redLines.forEach(pointList => {\n      this.drawLineOnMap('red', pointList)\n    })\n    orangeLines.forEach(pointList => {\n      this.drawLineOnMap('blue', pointList)\n    })\n    yellowLines.forEach(pointList => {\n      this.drawLineOnMap('yellow', pointList)\n    })\n    greenLines.forEach(pointList => {\n      this.drawLineOnMap('green', pointList)\n    })\n  }\n  render () {\n    return <Wrapper id=\"map\"/>\n  }\n}\n\n\nexport default Leafmap;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport Leafmap from './map'\n\nclass App extends Component {\n\tstate = {\n\t\tcommaData: []\n\t}\n  componentDidMount () {\n  \taxios.get('http://localhost:8080/api/comma-data')\n      .then( (res) => {\n      \tthis.setState( {\n      \t\tcommaData: res.data\n      \t})\n      })\n      .catch ( (err) => {\n        console.log('err')\n      })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Leafmap data={this.state.commaData}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import map from './map';\n// map();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
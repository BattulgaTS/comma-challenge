{"ast":null,"code":"import _classCallCheck from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tulga/Code/Projects/comma-challenge/react/src/map.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: $(props -> props.width);\\n  height: $(props -> props.height);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\nvar Wrapper = styled.div(_templateObject());\n\nvar Leafmap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leafmap, _Component);\n\n  function Leafmap() {\n    _classCallCheck(this, Leafmap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Leafmap).apply(this, arguments));\n  }\n\n  _createClass(Leafmap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.map = L.map('map', {\n        center: {\n          lat: 37.77,\n          lng: -122.43\n        },\n        zoom: 15,\n        zoomControl: false\n      });\n      L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n        detectRetina: true,\n        maxZoom: 20,\n        maxNativeZoom: 17\n      }).addTo(this.map);\n      setTimeout(function () {\n        return _this.map.invalidateSize();\n      }, 10);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      console.log(\"this.props.data\", this.props.data);\n      var trips = this.props.data.map(function (trip) {\n        var tripPointList = trip.coords.map(function (point) {\n          return new L.LatLng(point.lat, point.lng);\n        });\n        return tripPointList;\n      });\n      trips.forEach(function (pointList) {\n        var firstpolyline = new L.Polyline(pointList, {\n          color: 'blue',\n          weight: 3,\n          opacity: 0.5,\n          smoothFactor: 1\n        });\n        firstpolyline.addTo(_this2.map);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Wrapper, {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Leafmap;\n}(Component);\n\nexport default Leafmap;","map":{"version":3,"sources":["/Users/tulga/Code/Projects/comma-challenge/react/src/map.js"],"names":["React","Component","L","styled","Wrapper","div","Leafmap","map","center","lat","lng","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","addTo","setTimeout","invalidateSize","console","log","props","data","trips","trip","tripPointList","coords","point","LatLng","forEach","pointList","firstpolyline","Polyline","color","weight","opacity","smoothFactor"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,0BAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,IAAMC,OAAO,GAAGD,MAAM,CAACE,GAAV,mBAAb;;IAKMC,O;;;;;;;;;;;;;wCACgB;AAAA;;AAClB,WAAKC,GAAL,GAAWL,CAAC,CAACK,GAAF,CAAM,KAAN,EAAa;AACtBC,QAAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAAE,KAAN;AAAaC,UAAAA,GAAG,EAAE,CAAC;AAAnB,SADc;AAEtBC,QAAAA,IAAI,EAAE,EAFgB;AAGtBC,QAAAA,WAAW,EAAE;AAHS,OAAb,CAAX;AAKAV,MAAAA,CAAC,CAACW,SAAF,CAAY,kGAAZ,EAAgH;AAC9GC,QAAAA,YAAY,EAAE,IADgG;AAE9GC,QAAAA,OAAO,EAAE,EAFqG;AAG9GC,QAAAA,aAAa,EAAE;AAH+F,OAAhH,EAIGC,KAJH,CAIS,KAAKV,GAJd;AAMAW,MAAAA,UAAU,CAAE;AAAA,eAAM,KAAI,CAACX,GAAL,CAASY,cAAT,EAAN;AAAA,OAAF,EAAmC,EAAnC,CAAV;AAED;;;yCACoB;AAAA;;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKC,KAAL,CAAWC,IAA1C;AAEA,UAAIC,KAAK,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBhB,GAAhB,CAAqB,UAACkB,IAAD,EAAU;AACzC,YAAIC,aAAa,GAAGD,IAAI,CAACE,MAAL,CAAYpB,GAAZ,CAAiB,UAAAqB,KAAK,EAAI;AAC5C,iBAAO,IAAK1B,CAAC,CAAC2B,MAAP,CAAcD,KAAK,CAACnB,GAApB,EAAyBmB,KAAK,CAAClB,GAA/B,CAAP;AACD,SAFmB,CAApB;AAGA,eAAOgB,aAAP;AACD,OALW,CAAZ;AAMAF,MAAAA,KAAK,CAACM,OAAN,CAAc,UAAAC,SAAS,EAAI;AACzB,YAAIC,aAAa,GAAG,IAAI9B,CAAC,CAAC+B,QAAN,CAAeF,SAAf,EAA0B;AAC5CG,UAAAA,KAAK,EAAE,MADqC;AAE5CC,UAAAA,MAAM,EAAE,CAFoC;AAG5CC,UAAAA,OAAO,EAAE,GAHmC;AAI5CC,UAAAA,YAAY,EAAE;AAJ8B,SAA1B,CAApB;AAMAL,QAAAA,aAAa,CAACf,KAAd,CAAoB,MAAI,CAACV,GAAzB;AACD,OARD;AASD;;;6BACS;AACR,aAAO,oBAAC,OAAD;AAAS,QAAA,EAAE,EAAC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EArCmBN,S;;AAyCtB,eAAeK,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\n\n\nconst Wrapper = styled.div`\n  width: $(props -> props.width);\n  height: $(props -> props.height);\n`;\n\nclass Leafmap extends Component {\n  componentDidMount() {\n    this.map = L.map('map', {\n      center: {lat: 37.77, lng: -122.43},\n      zoom: 15,\n      zoomControl: false\n    })\n    L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n      detectRetina: true,\n      maxZoom: 20,\n      maxNativeZoom: 17,\n    }).addTo(this.map);\n\n    setTimeout( () => this.map.invalidateSize(), 10 )\n\n  }\n  componentDidUpdate() {\n    console.log(\"this.props.data\", this.props.data)\n\n    let trips = this.props.data.map( (trip) => {\n      let tripPointList = trip.coords.map( point => {\n        return new  L.LatLng(point.lat, point.lng)\n      })\n      return tripPointList\n    })\n    trips.forEach(pointList => {\n      var firstpolyline = new L.Polyline(pointList, {\n        color: 'blue',\n        weight: 3,\n        opacity: 0.5,\n        smoothFactor: 1\n      });\n      firstpolyline.addTo(this.map);  \n    })\n  }\n  render () {\n    return <Wrapper id=\"map\"/>\n  }\n}\n\n\nexport default Leafmap;"]},"metadata":{},"sourceType":"module"}
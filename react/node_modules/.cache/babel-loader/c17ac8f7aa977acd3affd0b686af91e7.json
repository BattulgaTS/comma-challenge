{"ast":null,"code":"import _classCallCheck from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tulga/Code/Projects/comma-challenge/react/src/map.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: $(props -> props.width);\\n  height: $(props -> props.height);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\nvar Wrapper = styled.div(_templateObject());\n\nvar getPointColor = function getPointColor(point) {\n  var speedThreshold = [15, 30, 45];\n  if (point.speed < speedThreshold[0]) return 'green';\n  if (point.speed < speedThreshold[1]) return 'yellow';\n  if (point.speed < speedThreshold[2]) return 'orange';\n  return 'red';\n};\n\nvar Leafmap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leafmap, _Component);\n\n  function Leafmap() {\n    _classCallCheck(this, Leafmap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Leafmap).apply(this, arguments));\n  }\n\n  _createClass(Leafmap, [{\n    key: \"drawLineOnMap\",\n    value: function drawLineOnMap(color, pointList) {\n      var firstpolyline = new L.Polyline(pointList, {\n        color: color,\n        weight: 3,\n        opacity: 0.5,\n        smoothFactor: 1\n      });\n      firstpolyline.addTo(this.map);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.map = L.map('map', {\n        center: {\n          lat: 37.77,\n          lng: -122.43\n        },\n        zoom: 15,\n        zoomControl: false\n      });\n      L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n        detectRetina: true,\n        maxZoom: 20,\n        maxNativeZoom: 17\n      }).addTo(this.map);\n      setTimeout(function () {\n        return _this.map.invalidateSize();\n      }, 10);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var redLines = [];\n      var orangeLines = [];\n      var yellowLines = [];\n      var greenLines = [];\n      this.props.data.forEach(function (trip) {\n        var currentLine = [];\n        var currentColor = null;\n        trip.coords.forEach(function (point) {\n          if (currentColor == null) {\n            currentColor = getPointColor(point);\n            currentLine.push(new L.point({\n              lat: point.lat,\n              lng: point.lng\n            }));\n          } else {\n            currentLine.push(new L.point({\n              lat: point.lat,\n              lng: point.lng\n            }));\n\n            if (currentColor !== getPointColor(point)) {\n              if (getPointColor(point) === 'red') redLines.push(currentLine);\n              if (getPointColor(point) === 'orange') orangeLines.push(currentLine);\n              if (getPointColor(point) === 'yellow') yellowLines.push(currentLine);\n              if (getPointColor(point) === 'green') greenLines.push(currentLine);\n              currentLine = [];\n              currentColor = null;\n            }\n          }\n        });\n      });\n      redLines.forEach(function (pointList) {\n        _this2.drawLineOnMap('red', pointList);\n      }); // orangeLines.forEach(pointList => {\n      //   this.drawLine('orange', pointList)\n      // })\n      // yellowLines.forEach(pointList => {\n      //   this.drawLine('yellow', pointList)\n      // })\n      // greenLines.forEach(pointList => {\n      //   this.drawLine('green', pointList)\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Wrapper, {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Leafmap;\n}(Component);\n\nexport default Leafmap;","map":{"version":3,"sources":["/Users/tulga/Code/Projects/comma-challenge/react/src/map.js"],"names":["React","Component","L","styled","Wrapper","div","getPointColor","point","speedThreshold","speed","Leafmap","color","pointList","firstpolyline","Polyline","weight","opacity","smoothFactor","addTo","map","center","lat","lng","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","setTimeout","invalidateSize","redLines","orangeLines","yellowLines","greenLines","props","data","forEach","trip","currentLine","currentColor","coords","push","drawLineOnMap"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\n\n\nconst Wrapper = styled.div`\n  width: $(props -> props.width);\n  height: $(props -> props.height);\n`;\n\nconst getPointColor = function (point){\n  let speedThreshold = [15, 30, 45];\n  if (point.speed < speedThreshold[0]) return 'green'\n  if (point.speed < speedThreshold[1]) return 'yellow'\n  if (point.speed < speedThreshold[2]) return 'orange'\n  return 'red'\n}\n\nclass Leafmap extends Component {\n  drawLineOnMap(color, pointList){\n    let firstpolyline = new L.Polyline(pointList, {\n      color: color,\n      weight: 3,\n      opacity: 0.5,\n      smoothFactor: 1\n    });\n    firstpolyline.addTo(this.map);\n  }\n  componentDidMount() {\n    this.map = L.map('map', {\n      center: {lat: 37.77, lng: -122.43},\n      zoom: 15,\n      zoomControl: false\n    })\n    L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n      detectRetina: true,\n      maxZoom: 20,\n      maxNativeZoom: 17,\n    }).addTo(this.map);\n\n    setTimeout( () => this.map.invalidateSize(), 10 )\n\n  }\n  componentDidUpdate() {\n    let redLines = [];\n    let orangeLines = [];\n    let yellowLines = [];\n    let greenLines = [];\n\n    this.props.data.forEach( (trip) => {\n      let currentLine = [];\n      let currentColor = null;\n      trip.coords.forEach( point => {\n        if (currentColor == null) {\n          currentColor = getPointColor(point);\n          currentLine.push(new L.point({lat: point.lat, lng: point.lng}));\n        } else {\n          currentLine.push(new L.point({lat: point.lat, lng: point.lng}));\n          \n          if (currentColor !== getPointColor(point)) {\n            if (getPointColor(point) === 'red') redLines.push(currentLine);\n            if (getPointColor(point) === 'orange') orangeLines.push(currentLine);\n            if (getPointColor(point) === 'yellow') yellowLines.push(currentLine);\n            if (getPointColor(point) === 'green') greenLines.push(currentLine);\n            currentLine = [];\n            currentColor = null;\n          }\n        }\n      })\n    })\n    redLines.forEach(pointList => {\n      this.drawLineOnMap('red', pointList)\n    })\n    // orangeLines.forEach(pointList => {\n    //   this.drawLine('orange', pointList)\n    // })\n    // yellowLines.forEach(pointList => {\n    //   this.drawLine('yellow', pointList)\n    // })\n    // greenLines.forEach(pointList => {\n    //   this.drawLine('green', pointList)\n    // })\n  }\n  render () {\n    return <Wrapper id=\"map\"/>\n  }\n}\n\n\nexport default Leafmap;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/tulga/Code/Projects/comma-challenge/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tulga/Code/Projects/comma-challenge/react/src/map.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: $(props -> props.width);\\n  height: $(props -> props.height);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\nvar Wrapper = styled.div(_templateObject());\n\nvar Leafmap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leafmap, _Component);\n\n  function Leafmap() {\n    _classCallCheck(this, Leafmap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Leafmap).apply(this, arguments));\n  }\n\n  _createClass(Leafmap, [{\n    key: \"drawLine\",\n    value: function drawLine(color, pointList) {\n      var firstpolyline = new L.Polyline(pointList, {\n        color: color,\n        weight: 3,\n        opacity: 0.5,\n        smoothFactor: 1\n      });\n      firstpolyline.addTo(this.map);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.map = L.map('map', {\n        center: {\n          lat: 37.77,\n          lng: -122.43\n        },\n        zoom: 15,\n        zoomControl: false\n      });\n      L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n        detectRetina: true,\n        maxZoom: 20,\n        maxNativeZoom: 17\n      }).addTo(this.map);\n      setTimeout(function () {\n        return _this.map.invalidateSize();\n      }, 10);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var trips = this.props.data.map(function (trip) {\n        var tripPointList = trip.coords.map(function (point) {\n          return new L.LatLng(point.lat, point.lng);\n        });\n        return tripPointList;\n      });\n      trips.forEach(function (pointList) {\n        _this2.drawLine('blue', pointList);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Wrapper, {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Leafmap;\n}(Component);\n\nexport default Leafmap;","map":{"version":3,"sources":["/Users/tulga/Code/Projects/comma-challenge/react/src/map.js"],"names":["React","Component","L","styled","Wrapper","div","Leafmap","color","pointList","firstpolyline","Polyline","weight","opacity","smoothFactor","addTo","map","center","lat","lng","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","setTimeout","invalidateSize","trips","props","data","trip","tripPointList","coords","point","LatLng","forEach","drawLine"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,0BAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,IAAMC,OAAO,GAAGD,MAAM,CAACE,GAAV,mBAAb;;IAKMC,O;;;;;;;;;;;;;6BACKC,K,EAAOC,S,EAAU;AACxB,UAAIC,aAAa,GAAG,IAAIP,CAAC,CAACQ,QAAN,CAAeF,SAAf,EAA0B;AAC5CD,QAAAA,KAAK,EAAEA,KADqC;AAE5CI,QAAAA,MAAM,EAAE,CAFoC;AAG5CC,QAAAA,OAAO,EAAE,GAHmC;AAI5CC,QAAAA,YAAY,EAAE;AAJ8B,OAA1B,CAApB;AAMAJ,MAAAA,aAAa,CAACK,KAAd,CAAoB,KAAKC,GAAzB;AACD;;;wCACmB;AAAA;;AAClB,WAAKA,GAAL,GAAWb,CAAC,CAACa,GAAF,CAAM,KAAN,EAAa;AACtBC,QAAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAAE,KAAN;AAAaC,UAAAA,GAAG,EAAE,CAAC;AAAnB,SADc;AAEtBC,QAAAA,IAAI,EAAE,EAFgB;AAGtBC,QAAAA,WAAW,EAAE;AAHS,OAAb,CAAX;AAKAlB,MAAAA,CAAC,CAACmB,SAAF,CAAY,kGAAZ,EAAgH;AAC9GC,QAAAA,YAAY,EAAE,IADgG;AAE9GC,QAAAA,OAAO,EAAE,EAFqG;AAG9GC,QAAAA,aAAa,EAAE;AAH+F,OAAhH,EAIGV,KAJH,CAIS,KAAKC,GAJd;AAMAU,MAAAA,UAAU,CAAE;AAAA,eAAM,KAAI,CAACV,GAAL,CAASW,cAAT,EAAN;AAAA,OAAF,EAAmC,EAAnC,CAAV;AAED;;;yCACoB;AAAA;;AACnB,UAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBd,GAAhB,CAAqB,UAACe,IAAD,EAAU;AACzC,YAAIC,aAAa,GAAGD,IAAI,CAACE,MAAL,CAAYjB,GAAZ,CAAiB,UAAAkB,KAAK,EAAI;AAC5C,iBAAO,IAAK/B,CAAC,CAACgC,MAAP,CAAcD,KAAK,CAAChB,GAApB,EAAyBgB,KAAK,CAACf,GAA/B,CAAP;AACD,SAFmB,CAApB;AAGA,eAAOa,aAAP;AACD,OALW,CAAZ;AAMAJ,MAAAA,KAAK,CAACQ,OAAN,CAAc,UAAA3B,SAAS,EAAI;AACzB,QAAA,MAAI,CAAC4B,QAAL,CAAc,MAAd,EAAsB5B,SAAtB;AACD,OAFD;AAGD;;;6BACS;AACR,aAAO,oBAAC,OAAD;AAAS,QAAA,EAAE,EAAC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAtCmBP,S;;AA0CtB,eAAeK,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\n\n\nconst Wrapper = styled.div`\n  width: $(props -> props.width);\n  height: $(props -> props.height);\n`;\n\nclass Leafmap extends Component {\n  drawLine(color, pointList){\n    let firstpolyline = new L.Polyline(pointList, {\n      color: color,\n      weight: 3,\n      opacity: 0.5,\n      smoothFactor: 1\n    });\n    firstpolyline.addTo(this.map);\n  }\n  componentDidMount() {\n    this.map = L.map('map', {\n      center: {lat: 37.77, lng: -122.43},\n      zoom: 15,\n      zoomControl: false\n    })\n    L.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\", {\n      detectRetina: true,\n      maxZoom: 20,\n      maxNativeZoom: 17,\n    }).addTo(this.map);\n\n    setTimeout( () => this.map.invalidateSize(), 10 )\n\n  }\n  componentDidUpdate() {\n    let trips = this.props.data.map( (trip) => {\n      let tripPointList = trip.coords.map( point => {\n        return new  L.LatLng(point.lat, point.lng)\n      })\n      return tripPointList\n    })\n    trips.forEach(pointList => {\n      this.drawLine('blue', pointList)\n    })\n  }\n  render () {\n    return <Wrapper id=\"map\"/>\n  }\n}\n\n\nexport default Leafmap;"]},"metadata":{},"sourceType":"module"}
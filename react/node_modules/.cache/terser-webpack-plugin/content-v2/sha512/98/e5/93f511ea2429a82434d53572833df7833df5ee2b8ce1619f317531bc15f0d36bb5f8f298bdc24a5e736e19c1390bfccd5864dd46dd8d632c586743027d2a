{"map":"{\"version\":3,\"sources\":[\"/Users/tulga/Code/Projects/comma-challenge/react/src/map.js\",\"/Users/tulga/Code/Projects/comma-challenge/react/src/App.js\",\"/Users/tulga/Code/Projects/comma-challenge/react/src/serviceWorker.js\",\"/Users/tulga/Code/Projects/comma-challenge/react/src/index.js\"],\"names\":[\"Wrapper\",\"styled\",\"div\",\"_templateObject\",\"Leafmap\",\"_this\",\"this\",\"map\",\"L\",\"center\",\"lat\",\"lng\",\"zoom\",\"zoomControl\",\"tileLayer\",\"detectRetina\",\"maxZoom\",\"maxNativeZoom\",\"addTo\",\"setTimeout\",\"invalidateSize\",\"axios\",\"get\",\"then\",\"data\",\"console\",\"log\",\"react_default\",\"a\",\"createElement\",\"id\",\"Component\",\"App\",\"className\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"8cAMA,IAAMA,EAAUC,EAAAA,EAAOC,IAAVC,KAkDEC,oOArCO,IAAAC,EAAAC,KAClBA,KAAKC,IAAMC,EAAAA,EAAED,IAAI,MAAO,CACtBE,OAAQ,CAACC,IAAK,MAAOC,KAAM,QAC3BC,KAAM,GACNC,aAAa,IAEfL,EAAAA,EAAEM,UAAU,mGAAoG,CAC9GC,cAAc,EACdC,QAAS,GACTC,cAAe,KACdC,MAAMZ,KAAKC,KAEdY,WAAY,WAAA,OAAMd,EAAKE,IAAIa,kBAAkB,IAY7CC,EAAAA,EAAMC,IAAI,iCACPC,KAAK,SAACC,GACLC,QAAQC,IAAI,OAAQF,sCAMxB,OAAOG,EAAAC,EAAAC,cAAC7B,EAAD,CAAS8B,GAAG,eAxCDC,EAAAA,WCIPC,mLARX,OACEL,EAAAC,EAAAC,cAAA,MAAA,CAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACtB,EAAD,cAJUwB,EAAAA,WCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,EAAAA,EAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport L from 'leaflet';\\nimport 'leaflet/dist/leaflet.css';\\nimport styled from 'styled-components';\\nimport axios from 'axios';\\n\\nconst Wrapper = styled.div`\\n  width: $(props -> props.width);\\n  height: $(props -> props.height);\\n`;\\n\\nclass Leafmap extends Component {\\n  dataLoader () {\\n    // \\n    // context.keys().forEach(function (key) {\\n    //     obj[key] = context(key);\\n    // });\\n    \\n  }\\n  componentDidMount() {\\n    this.map = L.map('map', {\\n      center: {lat: 37.77, lng: -122.43},\\n      zoom: 15,\\n      zoomControl: false\\n    })\\n    L.tileLayer(\\\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\\\", {\\n      detectRetina: true,\\n      maxZoom: 20,\\n      maxNativeZoom: 17,\\n    }).addTo(this.map);\\n\\n    setTimeout( () => this.map.invalidateSize(), 10 )\\n    // var pointA = new L.LatLng(37.77, -122.43);\\n    // var pointB = new L.LatLng(27.77, -122.43);\\n    // var pointList = [pointA, pointB];\\n\\n    // var firstpolyline = new L.Polyline(pointList, {\\n    //     color: 'red',\\n    //     weight: 3,\\n    //     opacity: 0.5,\\n    //     smoothFactor: 1\\n    // });\\n    // firstpolyline.addTo(this.map);\\n    axios.get('localhost:8080/api/comma-data')\\n      .then((data) => {\\n        console.log(\\\"DATA\\\", data);\\n      })\\n    \\n\\n  }\\n  render () {\\n    return <Wrapper id=\\\"map\\\"/>\\n  }\\n}\\n\\n\\nexport default Leafmap;\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Leafmap from './map'\\n\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <Leafmap />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n// import map from './map';\\n// map();\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{26:function(e,t,n){e.exports=n(57)},32:function(e,t,n){},33:function(e,t,n){},57:function(e,t,n){\"use strict\";n.r(t);var a=n(0),o=n.n(a),r=n(2),i=n.n(r),c=(n(32),n(3)),u=n(4),s=n(6),l=n(5),p=n(7),m=(n(33),n(20)),d=n(10),h=n.n(d),v=(n(34),n(22)),f=n(21),w=n.n(f);function b(){var e=Object(m.a)([\"\\n  width: $(props -> props.width);\\n  height: $(props -> props.height);\\n\"]);return b=function(){return e},e}var j=v.a.div(b()),O=function(e){function t(){return Object(c.a)(this,t),Object(s.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(u.a)(t,[{key:\"dataLoader\",value:function(){}},{key:\"componentDidMount\",value:function(){var e=this;this.map=h.a.map(\"map\",{center:{lat:37.77,lng:-122.43},zoom:15,zoomControl:!1}),h.a.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\",{detectRetina:!0,maxZoom:20,maxNativeZoom:17}).addTo(this.map),setTimeout(function(){return e.map.invalidateSize()},10),w.a.get(\"localhost:8080/api/comma-data\").then(function(e){console.log(\"DATA\",e)})}},{key:\"render\",value:function(){return o.a.createElement(j,{id:\"map\"})}}]),t}(a.Component),g=function(e){function t(){return Object(c.a)(this,t),Object(s.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(O,null))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[26,1,2]]]);","extractedComments":[]}